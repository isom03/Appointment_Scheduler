package controller;

import helper.JDBC;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.Customer;
import model.CustomerRecords;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**This class is a controller for the form to add or update a customer*/
public class AddOrUpdateCustomer {

    public TextField customerIDTextField;
    public TextField customerNameTextField;
    public TextField addressTextField;
    public TextField postalCodeTextField;
    public ComboBox<String> countryComboBox;
    public ComboBox<String> divisionComboBox;
    public TextField phoneNumTextField;

    /**This method populates combo boxes upon class being initialized*/
    public void initialize (){
        countryComboBox.setItems(CustomerRecords.getCountryList());
        countryComboBox.setPromptText("Select country...");
        divisionComboBox.setPromptText("Select division...");

    }
    /**Method will be passed a customer from Customer List page. It will use customer details to populate Update customer form
     @param someCustomer customer selected by user in Customer List page.
     */
    public void sendCustomer (Customer someCustomer) {
        //Setting value of text fields based on customer info
        customerIDTextField.setText(String.valueOf(someCustomer.getCustomerID()));
        customerNameTextField.setText(someCustomer.getCustomerName());
        addressTextField.setText(someCustomer.getAddress());
        phoneNumTextField.setText(someCustomer.getPhone());
        postalCodeTextField.setText(someCustomer.getPostalCode());

        countryComboBox.setValue(someCustomer.getCountry());

        //Need to check which country user's address uses, so I can determine what division list to display
        if (someCustomer.getCountry().equals("U.S")){
            divisionComboBox.setItems(CustomerRecords.getUSDivisionList());
        }
        else if (someCustomer.getCountry().equals("UK")){
            divisionComboBox.setItems(CustomerRecords.getUkDivisionList());
        }
        else {
            divisionComboBox.setItems(CustomerRecords.getCanadaDivisionList());
        }

        divisionComboBox.setValue(someCustomer.getDivision());

    }

    /**Method add/update customers once save button is clicked
     * @param actionEvent save customer button clicked
     * @throws SQLException generated by SQL query
     * @throws IOException generated by FXML loader
     */
    public void saveCustomerButtonClicked(ActionEvent actionEvent) throws SQLException, IOException {
        if(customerIDTextField.getText().equals("")){
            //checking to see if having on form for update and add customer will work if customerID is null
            System.out.println("New customer is being added");
            //create new object and add to customer list
            Customer newCustomer = new Customer(customerNameTextField.getText(), addressTextField.getText(),
                     postalCodeTextField.getText(), phoneNumTextField.getText(), countryComboBox.getSelectionModel().getSelectedItem(),
                     divisionComboBox.getSelectionModel().getSelectedItem());

            //Adding customer
            CustomerRecords.addCustomer(newCustomer);

        }
        else {
            Customer updatedCustomer = CustomerRecords.getCustomer(Integer.valueOf(customerIDTextField.getText()));
            //checking to see if I was able to get correct customer
            System.out.println(updatedCustomer.getCustomerName());
            //Updating customer info with entries from text fields
            updatedCustomer.setCustomerName(customerNameTextField.getText());
            updatedCustomer.setAddress(addressTextField.getText());
            updatedCustomer.setPostalCode(postalCodeTextField.getText());
            updatedCustomer.setPhone(phoneNumTextField.getText());
            updatedCustomer.setCountry(countryComboBox.getSelectionModel().getSelectedItem());
            updatedCustomer.setDivision(divisionComboBox.getSelectionModel().getSelectedItem());

            //Need to make updates to database as well
            String sql = "UPDATE customers SET Customer_Name = '" + updatedCustomer.getCustomerName() + "', Address = '" +
                    updatedCustomer.getAddress() + "', Postal_Code = '" + updatedCustomer.getPostalCode() + "', Phone = '" +
                    updatedCustomer.getPhone() + "', Division_ID = '" + CustomerRecords.getDivisionID(updatedCustomer.getDivision()) +
                    "' WHERE Customer_ID = " + updatedCustomer.getCustomerID();
            PreparedStatement ps = JDBC.connection.prepareStatement(sql);
            ps.executeUpdate();

        }

        //Taking user back to customer list after adding new customer to records
        Parent root = FXMLLoader.load(getClass().getResource("/view/CustomerList.fxml"));
        Stage stage = (Stage)((Node)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 800, 600);
        stage.setTitle("Customer List Form");
        stage.setScene(scene);
        stage.show();

    }

    /**This method takes a user to the Customer list page after cancel button is clicked.
     @param actionEvent modify part button being clicked
     @throws IOException when unable to locate "CustomerList.fxml"
     */
    public void cancelButtonClicked(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/CustomerList.fxml"));
        Stage stage = (Stage)((Node)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 800, 600);
        stage.setTitle("Customer List Form");
        stage.setScene(scene);
        stage.show();
    }

    /**This method sets the division combobox based upon the country selected from the countryComboBox
     * @param actionEvent country selected from countryComboBox
     */
    public void countrySelected(ActionEvent actionEvent) {
        if (countryComboBox.getSelectionModel().getSelectedItem().equals("U.S")){
            divisionComboBox.setItems(CustomerRecords.getUSDivisionList());
        }
        else if (countryComboBox.getSelectionModel().getSelectedItem().equals("UK")){
            divisionComboBox.setItems(CustomerRecords.getUkDivisionList());
        }
        else {
            divisionComboBox.setItems(CustomerRecords.getCanadaDivisionList());
        }
    }
}
