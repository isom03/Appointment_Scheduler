package controller;

import helper.JDBC;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.layout.Region;
import javafx.stage.Stage;
import model.Appointment;
import model.Customer;
import model.CustomerRecords;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.*;
import java.util.TimeZone;

/**This class is a controller for the UpdateOrAddAppointment form
 */
public class UpdateOrAddAppointment {
    public TextField appIDTextField;
    public TextField titleTextField;
    public TextField descriptionTextField;
    public TextField locationTextField;
    public ComboBox contactComboBox;
    public ComboBox typeComboBox;
    public DatePicker dateDatePicker;
    public ComboBox startTimeComboBox;
    public ComboBox endTimeComboBox;
    public ComboBox custIDComboBox;
    public ComboBox userIDComboBox;


    /**Method creates eastern standard time constants for business hours, then converts these constants to users local time for appointment time comboboxes
     * @throws SQLException generated by SQL query
     */
    public void initialize () throws SQLException {

        //Creating constants for EST start and end time
        ZoneId newYorkZoneID = ZoneId.of("America/New_York");
        LocalDate newYorkDate = LocalDate.ofInstant(Instant.now(), newYorkZoneID);
        LocalTime eastCoastStartTime = LocalTime.of(8, 00);
        LocalTime eastCoastEndTime = LocalTime.of(22,01);
        ZonedDateTime estZDTStartTime = ZonedDateTime.of(newYorkDate, eastCoastStartTime, newYorkZoneID);
        ZonedDateTime estZDTEndTime = ZonedDateTime.of(newYorkDate,eastCoastEndTime,newYorkZoneID);

        //Converting constants to local ZoneDateTime objects
        ZoneId localZoneID = ZoneId.of(TimeZone.getDefault().getID());
        ZonedDateTime usersLocalStartZDT = estZDTStartTime.withZoneSameInstant(localZoneID);
        ZonedDateTime usersLocalEndZDT = estZDTEndTime.withZoneSameInstant(localZoneID);


        LocalTime start = usersLocalStartZDT.toLocalDateTime().toLocalTime();
        LocalTime end = usersLocalEndZDT.toLocalDateTime().toLocalTime();

        while (start.isBefore(end)) {
            startTimeComboBox.getItems().add(start);
            endTimeComboBox.getItems().add(start);

            start = start.plusMinutes(15);
        }

        contactComboBox.setItems(CustomerRecords.getContactList());
        typeComboBox.setItems(CustomerRecords.getTypesOfApps());

        for(Customer someCustomer:CustomerRecords.getCustomerList()){
            custIDComboBox.getItems().add(someCustomer.getCustomerID());
        }
        userIDComboBox.setItems(CustomerRecords.getUserList());

        startTimeComboBox.setPromptText("Select appointment start time...");
        endTimeComboBox.setPromptText("Select appointment end time...");
    }

    /**Method takes an appointment and sets the fields on the form based upon the appointments characteristics
     * @param someAppointment usually a selected appointment from AppointmentView form
     */
    public void sendAppointment (Appointment someAppointment) {
        appIDTextField.setText(String.valueOf(someAppointment.getAppointmentID()));
        titleTextField.setText(someAppointment.getTitle());
        descriptionTextField.setText(someAppointment.getDescription());
        locationTextField.setText(someAppointment.getLocation());
        contactComboBox.setValue(someAppointment.getContact());
        typeComboBox.setValue(someAppointment.getType());
        dateDatePicker.setValue(someAppointment.getStartDateAndTime().toLocalDateTime().toLocalDate());
        startTimeComboBox.setValue(someAppointment.getStartDateAndTime().toLocalDateTime().toLocalTime());
        endTimeComboBox.setValue(someAppointment.getEndDateAndTime().toLocalDateTime().toLocalTime());
        custIDComboBox.setValue(someAppointment.getCustomerID());
        userIDComboBox.setValue(someAppointment.getUserID());
    }

    /**Method saves an appointment to database and observable lists, then takes user to AppointmentView form
     * @param actionEvent save changes button clicked
     * @throws SQLException generated by SQL update
     * @throws IOException generated by FXML loader
     */
    public void saveChangesButtonClicked(ActionEvent actionEvent) throws SQLException, IOException {
        //Boolean allows me to keep track of whether user's inputs allowed the creation of a valid appointment or whether an error message should be displayed
        boolean invalidAppointment = true;

        int customerID = (int) custIDComboBox.getSelectionModel().getSelectedItem();
        int userID = (int) userIDComboBox.getSelectionModel().getSelectedItem();

        LocalDate selectedDate = dateDatePicker.getValue();
        LocalTime startTime = (LocalTime) startTimeComboBox.getSelectionModel().getSelectedItem();
        LocalTime endTime = (LocalTime) endTimeComboBox.getSelectionModel().getSelectedItem();
        LocalDateTime startDateAndTime = LocalDateTime.of(selectedDate,startTime);
        LocalDateTime endDateAndTime = LocalDateTime.of(selectedDate,endTime);

        //If it's a new appointment with no appointment ID this code block is executed
        if(appIDTextField.getText().equals("")){

            if(CustomerRecords.validAppointmentTime(startDateAndTime,endDateAndTime,customerID)) {
                invalidAppointment = false;
                //create new appointment object and add to appointment list
                Appointment newApp = new Appointment(titleTextField.getText(),descriptionTextField.getText(),locationTextField.getText(),
                        (String)contactComboBox.getSelectionModel().getSelectedItem(),(String) typeComboBox.getSelectionModel().getSelectedItem(),
                        Timestamp.valueOf(startDateAndTime),Timestamp.valueOf(endDateAndTime), customerID,userID);
            //Adding appointment to customers list of appointments
                CustomerRecords.addAppToDatabase(newApp);
            }
        }
        //If it's an appointment that's being updated an appID exits and this code block will be executed
        else{
            int appID = Integer.parseInt(appIDTextField.getText());
            if(CustomerRecords.validAppointmentTime(startDateAndTime,endDateAndTime,customerID,appID)) {
                invalidAppointment = false;

                Appointment updateApp = CustomerRecords.getCustomer(customerID).getAppointment(appID);

                updateApp.setTitle(titleTextField.getText());
                updateApp.setDescription(descriptionTextField.getText());
                updateApp.setLocation(locationTextField.getText());
                updateApp.setContact((String) contactComboBox.getSelectionModel().getSelectedItem());
                updateApp.setType((String) typeComboBox.getSelectionModel().getSelectedItem());
                updateApp.setStartDateAndTime(Timestamp.valueOf(startDateAndTime));
                updateApp.setEndDateAndTime(Timestamp.valueOf(endDateAndTime));
                updateApp.setCustomerID(customerID);
                updateApp.setUserID(userID);

                //Need to make updates to database as well
                String sql = "UPDATE appointments SET Title = '" + updateApp.getTitle() + "', Description = '" +
                        updateApp.getDescription() + "', Location = '" + updateApp.getLocation() + "', Type = '" +
                        updateApp.getType() + "', Start = '" + CustomerRecords.localTimeStampToUTC(updateApp.getStartDateAndTime()) +
                        "', End = '" + CustomerRecords.localTimeStampToUTC(updateApp.getEndDateAndTime()) + "', Customer_ID = '" + updateApp.getCustomerID() +
                        "', User_ID = " + updateApp.getUserID() + ", Contact_ID = " + CustomerRecords.getContactID(updateApp.getContact()) +
                        " WHERE Appointment_ID = " + updateApp.getAppointmentID() + ";";
                PreparedStatement ps = JDBC.connection.prepareStatement(sql);
                ps.executeUpdate();
            }
        }

        //If it's a valid appointment and been added to customer records/database I want to take user back to appointment view
        if(!invalidAppointment) {
            //Taking user back to table view of appointments
            Parent root = FXMLLoader.load(getClass().getResource("/view/AppointmentView.fxml"));
            Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 800, 600);
            stage.setTitle("Appointment Viewing");
            stage.setScene(scene);
            stage.show();
        }
        else {
            //If it's an invalid appointment I want to display an error message
            Alert alert = new Alert(Alert.AlertType.ERROR, "Appointment cannot be scheduled due to overlapping appointment times");
            alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
            alert.showAndWait();
        }
    }

    /**Method takes user back to AppointmentView form
     * @param actionEvent cancel button clicked
     * @throws IOException generated from FXML loader
     */
    public void cancelButtonClicked(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/AppointmentView.fxml"));
        Stage stage = (Stage)((Node)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 800, 600);
        stage.setTitle("Appointment Viewing");
        stage.setScene(scene);
        stage.show();
    }
}
